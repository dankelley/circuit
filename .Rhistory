imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
range(lon)
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-70, -60), xaxp='i', asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-70, -60), xaxs='i', asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-70, -60), xaxs='r', asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-70, -60), xaxs='i', asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-70, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-500, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-500,0,50))
imagep(lon, lat, depth, zlim=c(-5000, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-5000,0,50))
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-400,0,50))
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-400,0,50), missingColor=gray)
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-400,0,50), missingColor='gray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=seq(-400,0,50), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-400,0,50)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-200,0,50)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -60), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,50)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -61), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,50)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,50)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), missingColor='lightgray')
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), col=oceColorsGebco)
z <- topoMaritimes[["z"]]
depth <- -z
imagep(lon, lat, z, zlim=c(-400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), col=oceColorsGebco)
imagep(lon, lat, depth, zlim=c(-400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), col=oceColorsGebco)
imagep(lon, lat, depth, zlim=c(400, 0), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), col=oceColorsGebco)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(-5000, seq(-300,0,25)), col=oceColorsGebco)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(5000, seq(300,0,25)), col=oceColorsGebco)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 5000), col=oceColorsGebco)
contour(lon, lat, depth, levels=0, add=TRUE, labels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 5000), col=oceColorsGebco)
contour(lon, lat, depth, levels=0, add=TRUE, label=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 5000), col=oceColorsGebco)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 5000), col=oceColorsGebco)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 5000), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=seq(0, 300, 25), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 1000), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=seq(0, 300, 25), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 3000), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=seq(0, 300, 25), col=oceColorsJet)
imagep(lon, lat, depth, zlim=c(0, 3000), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 1000), col=oceColorsJet)
imagep(lon, lat, depth, zlim=c(0, 3000), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 4000), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 3000), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 4000), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 4000), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
depth <- smoothGrid(depth)
depth <- smoothMatrix(depth)
depth <- matrixSmooth(depth)
imagep(lon, lat, depth, zlim=c(0, 400), xlim=c(-69, -62), asp=1/cos(pi * mean(range(lat))), breaks=c(seq(0, 300, 25), 4000), col=oceColorsJet)
contour(lon, lat, depth, levels=0, add=TRUE, drawlabels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=-50, labcex=1)
contour(lon, lat, depth, add=TRUE, levels=0, labels=FALSE)
plot(coastlineWorld, clat=46, clon=-63, span=1000)
contour(lon, lat, depth, add=TRUE, levels=0, labels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=-50, labcex=1)
plot(coastlineWorld, clat=46, clon=-63, span=1000)
contour(lon, lat, depth, add=TRUE, levels=50, labcex=1)
contour(lon, lat, depth, add=TRUE, levels=100)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE)
plot(coastlineMaritimes, col='white')
plot(coastlineMaritimes)
plot(coastlineWorld, clat=46, clon=-63, span=1500)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=500, drawlabels=FALSE)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE, col='green')
plot(coastlineMaritimes,, clat=46, clon=-63, span=1500)
plot(coastlineMaritimes, clat=46, clon=-63, span=1500)
plot(coastlineMaritimes, clat=46, clon=-63, span=100)
plot(coastlineMaritimes, clat=46, clon=-63, span=1000)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
depth <- matrixSmooth(depth)
plot(coastlineMaritimes, clat=46, clon=-63, span=1000)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE, col='green')
plot(coastlineWorld, clat=46, clon=-63, span=1500)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE, col='green')
depth <- -z
depth <- matrixSmooth(depth)
plot(coastlineWorld, clat=46, clon=-63, span=1500)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE, col='green')
contour(lon, lat, depth, add=TRUE, levels=500, drawlabels=FALSE)
plot(coastlineWorld, clat=46, clon=-63, span=1200)
contour(lon, lat, depth, add=TRUE, levels=50, drawlabels=FALSE, col='red')
contour(lon, lat, depth, add=TRUE, levels=100, drawlabels=FALSE, col='blue')
contour(lon, lat, depth, add=TRUE, levels=200, drawlabels=FALSE, col='green')
contour(lon, lat, depth, add=TRUE, levels=500, drawlabels=FALSE, col='yellow')
contour(lon, lat, depth, add=TRUE, levels=800, drawlabels=FALSE, col='yellow')
contour(lon, lat, depth, add=TRUE, levels=600, drawlabels=FALSE, col='yellow')
source("/tmp/r-plugin-kelley/Rsource-12120-ipo.R", echo=TRUE)
contour(lon, lat, depth, add=TRUE, levels=20, drawlabels=FALSE, col='pink')
source("/tmp/r-plugin-kelley/Rsource-12120-ipo.R", echo=TRUE)
q()
quartz(point=9)
source("/tmp/r-plugin-kelley/Rsource-24189-ipo.R", echo=TRUE)
xy<-locator(4)
xy
source("/tmp/r-plugin-kelley/Rsource-24189-ipo.R", echo=TRUE)
q()
library(oce)
??conductivity
q()
library(tools)
??install
library(tools)
install_github('oce', 'dankelley', 'develop')
library(devtools)
install_github('oce', 'dankelley', 'develop')
q()
library(voronoi)
??voronoi
ve(cbind(rnorm(3), rnorm(3)))
plot(ve(cbind(rnorm(3), rnorm(3))))
n<-10;plot(ve(cbind(rnorm(n), rnorm(n))))
?plot.ve
x <- rnorm(50, 1)#
y <- rnorm(50, 6, 3)#
d <- deldir(x, y)#
t1 <- ve(cbind(x,y))#
t2 <- ve(d)#
identical(t1,t2)#
par(mfrow=c(1,2))#
plot(t1)#
plot(t2)#
points(t2)
n<-10;adap.kern(cbind(rnorm(n), rnorm(n)))
n<-10;adap.kern(p=cbind(rnorm(n), rnorm(n)))
adap.kern(p=cbind(rnorm(n), rnorm(n)), lambda=1)
adap.kern(cbind(seq(-3,3),seq(-3,3)),p=cbind(rnorm(n), rnorm(n)), lambda=1)
gon  <- cbind(c(0,1,1,0), c(0,0,1,1))#
r    <- 8#
p    <- pattern.sim(r, type = "moon")#
plot(p, main = "points")
n    <- 75#
gd   <- seq(0, 1, len = n)#
y    <- as.matrix(expand.grid(gd, gd))#
z0   <- pattern.sim(r, type = "moon", pts = y)[,3]#
m0   <- matrix(z0, n, n)#
grsc <- grey(seq(1, 0, len = 1500))#
image(m0, col = grsc, axes = FALSE, main = "truth")#
box()
l    <- bw(p)#
z1   <- adap.kern(y, p, l, gon)#
m1   <- matrix(z1, n, n)#
image(m1, col = grsc, axes = FALSE, main = "adaptive kernel")#
box()
q()
library(oce)
??conduc
swConductivity(35,10,0)
swSCTp(5, 10, 0)
swSCTp(5, 10, 0, 'S/m')
swSCTp(2.3, 10, 0, 'S/m')
?oceBisect
dan <- function(C) swSCTp(C, 10, 0, 'S/m')
dan(2.3)
dan <- function(C) swSCTp(C, 10, 0, 'S/m') - 20
oceBisect(function(C) swSCTp(C, 10, 0, 'S/m') - 20, -100, 100)
oceBisect(function(C) swSCTp(C, 10, 0, 'S/m') - 20, -100, 100, .1)
oceBisect(function(C) swSCTp(C, 10, 0, 'S/m') - 20, 0, 100, .1)
oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1)
T <- 10; oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1)
oceBisect
source('~/oceBisect.R')
T <- 10; oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1)
oceBisect
T <- 10; oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1, T=10)
T <- 10; oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1, Ts=10)
T <- 10; oceBisect(function(C, T) swSCTp(C, T, 0, 'S/m') - 20, 0, 100, .1, T=10, p=100)
T <- 10; oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=100)
T <- 10; oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
swSCTp(2.3, 10, 0)
swSCTp(2.3, 10, 100)
T <- 10; oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
rm(T)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=100)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=20, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=100000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=10000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=100)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=10)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=1)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
options(digits=20)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=0)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=100)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .1, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .01, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, .001, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, T=10, p=1000)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, T=10, p=0)
oceBisect(function(C, T, p) swSCTp(C, T, p, 'S/m') - 20, 0, 100, T=10, p=100)
swSCTp(C, T, p, 'S/m')
swSCTp(30, T=10, p=0, 'S/m')
swSCTp(30, C=1, p=0, 'S/m')
swSCTp(C=2, T=20, p=0, 'S/m')
swSCTp(2, 20)
swSCTp(3, 20)
swSCTp(3, 20, conductivityUnit='S/m')
swSCTp(3:4, 20, conductivityUnit='S/m')
C<-seq(0,10, 0.1)
plot(C, swSCTp(C, rep(20, length(C)))
)
plot(C, swSCTp(C, rep(20, length(C))), type='l')
plot(C, swSCTp(C, rep(20, length(C))), xlab="Conductivity [S/m]", ylab="Salinity [PSU]", type='l')
C<-seq(0, 6, 0.1)
plot(C, swSCTp(C, rep(20, length(C))), xlab="Conductivity [S/m]", ylab="Salinity [PSU]", type='l')
C<-seq(0, 5, 0.1)
plot(C, swSCTp(C, rep(20, length(C))), xlab="Conductivity [S/m]", ylab="Salinity [PSU]", type='l')
n <- 100
C<-seq(0, 5, length.out=n)
plot(C, swSCTp(C, rep(20, n)), xlab="Conductivity [S/m]", ylab="Salinity [PSU]", type='l')
plot(C, swSCTp(C, rep(20, n), conductivityUnit="S/m"), xlab="Conductivity [S/m]", ylab="Salinity [PSU]", type='l')
lines(C, swSCTp(C, rep(30, n), conductivityUnit="S/m"), col='red')
lines(C, swSCTp(C, rep(15, n), conductivityUnit="S/m"), col='blue')
grid()
legend("topleft", lwd=1, col=c('blue', 'black', 'red'), legend=c("15C", "20C", "25C"))
legend("topleft", lwd=1, col=c('blue', 'black', 'red'), legend=c("15C", "20C", "25C"), bg='white')
source("/tmp/r-plugin-kelley/Rsource-21175-conductivity.R", echo=TRUE)
q()
3000/100
q()
d<-read.table("salinity.dat")
d
d<-read.table("salinity.dat", header=TRUE)
d
lm(S~Cl, data=read.table("salinity.dat", header=TRUE))
source("/tmp/r-plugin-kelley/Rsource-9105-salinity.R", echo=TRUE)
plot(d$Cl, d$S)
source("/tmp/r-plugin-kelley/Rsource-9105-salinity.R", echo=TRUE)
plot(m)
m
source("/tmp/r-plugin-kelley/Rsource-9105-salinity.R", echo=TRUE)
q()
setwd("/Users/kelley")
d<-read.table('dropbox/salinity/salinity-2.dat',header=T)
d
d[3:4,]
apply(d[3:4,], 1, mean)
apply(d[3:4,], 2, mean)
q()
setwd("/Users/kelley/src/R-kelley/oce")
library(oce)
data(topoWorld); lat<-topoWorld[["latitude"]];lon<-topoWorld[["longitude"]];z<-topoWorld[["z"]]
imagep(lon,lat,z)
imagep(lon,lat,z, axes=F)
imagep(lon,lat,z, axes=F)
imagep(lon,lat,z, axes=F, asp=1)
source("/tmp/r-plugin-kelley/Rsource-6655-oce.R", echo=TRUE)
source("/tmp/r-plugin-kelley/Rsource-6655-oce.R", echo=TRUE)
source("/tmp/r-plugin-kelley/Rsource-6655-oce.R", echo=TRUE)
source("/tmp/r-plugin-kelley/Rsource-6655-oce.R", echo=TRUE)
image(lon,lat,z)
image(lon,lat,z,axes=F)
q()
